AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ServiceName:
    Type: String
    Default: scrum-poker
  VpcId:
    Type: String
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  # ECS Stuff
  Cluster:
    Type: AWS::ECS::Cluster
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ServiceRole.Arn
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: Linux
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: ghcr.io/joeyak/scrum-poker:master
          Name: scrum-poker
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -f http://localhost:8080/ || exit 1"
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
  # Service:
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - LoadBalancerListener
  #   Properties:
  #     ServiceName: !Ref ServiceName
  #     Cluster: !Ref Cluster
  #     DesiredCount: 1
  #     LaunchType: FARGATE
  #     DeploymentConfiguration:
  #       MaximumPercent: 100
  #       MinimumHealthyPercent: 0
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         SecurityGroups:
  #           - !Ref SecurityGroup
  #         Subnets: !Ref SubnetIds
  #     TaskDefinition: !Ref TaskDefinition
  #     LoadBalancers:
  #       - ContainerName: !Ref ServiceName
  #         ContainerPort: 8080
  #         TargetGroupArn: !Ref TargetGroup

  # Security
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for scrum poker
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /

  # Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      TargetType: ip
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref SecurityGroup
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup

  # Logs
  LogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
