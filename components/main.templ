package components

import "strconv"
import "net/http"
import "github.com/joeyak/scrum-poker/models"
import "fmt"
import "strings"

templ BaseHTML(url string) {
	<!DOCTYPE html>
	<html>
		<head>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.jade.min.css"/>
			<script src="https://unpkg.com/htmx.org@1.9.10"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/ws.js"></script>
			<link rel="stylesheet" href="/static/root.css"/>
			<script type="text/javascript" src="/static/root.js"></script>
		</head>
		<body>
			<header>
				<a href="/">Scrum Poker</a> -
				@titleSpan("")
			</header>
			<main id="main" class="container-fluid" hx-boost="true" hx-target="#main">
				<div hx-get={ url } hx-trigger="load"></div>
			</main>
			<footer>Footer</footer>
		</body>
	</html>
}

templ titleSpan(title string) {
	<span id="title" hx-swap-oob="true">{ title }</span>
}

templ StatusPage(status int) {
	@titleSpan("Opps")
	<div style="text-align: center;">
		<h1>{ strconv.Itoa(status) } - { http.StatusText(status) }</h1>
	</div>
}

templ RootPage(info models.CookieData, errorMessage string) {
	@titleSpan("Welcome")
	if errorMessage != "" {
		<div class="error">{ errorMessage }</div>
	}
	<form id="newSessionForm" action="/new" method="POST" hx-push-url="false">
		<fieldset>
			<label>
				Cards
				<input type="text" name="cards" value={ strings.Join(info.Session.Cards, ",") }/>
				<small>A comma delimited list of cards to have in the session</small>
			</label>
			<label>
				Rows
				<input type="text" name="rows" value={ strings.Join(info.Session.Rows, ",") }/>
				<small>A comma delimited list of row labels to have in the session. Each row will be added up for a total points.</small>
			</label>
		</fieldset>
		<div>When you create a session, you will get a chance to copy a link with the settings chosen above.</div>
		<input type="submit" value="Create Session"/>
	</form>
}

templ SessionCreated(session models.Session, host string) {
	@titleSpan("Session Created")
	<div>Your session has been created.</div>
	<div><a href={ templ.URL(fmt.Sprintf("/session/%s", session.ID)) }>Join Room</a></div>
	<br/>
	<div>Here is a link to give to others to join</div>
	<div>
		<code
			data-tooltip="Click to copy"
			data-placement="bottom"
			onClick="copyContent(this)"
		>{ fmt.Sprintf("%s/session/%s", host, session.ID) }</code>
	</div>
	<br/>
	<div>Here is a link to create the room again. This info is also saved in a cookie for auto filling next time.</div>
	<div>
		<code
			data-tooltip="Click to copy"
			data-placement="bottom"
			onClick="copyContent(this)"
		>{ fmt.Sprintf("%s?cards=%s&rows=%s", host, strings.Join(session.Cards, ","), strings.Join(session.Rows, ",")) }</code>
	</div>
}

templ SessionJoin(session models.Session, info models.CookieData) {
	@titleSpan(fmt.Sprintf("Join Session %s", session.ID))
	<form action={ templ.URL(fmt.Sprintf("/session/%s/join", session.ID)) } method="POST">
		<fieldset>
			<div class="grid">
				<label>
					Username
					<input name="name" value={ info.User.Name }/>
				</label>
				<label>
					Type
					<select name="type">
						for _, userType := range []models.UserType{models.UserTypeParticipant, models.UserTypeWatcher} {
							<option selected?={ userType == info.User.Type }>{ string(userType) }</option>
						}
					</select>
				</label>
			</div>
			<label style="vertical-alignment: middle;">
				<input type="checkbox" name="isQA" role="switch" checked?={ info.User.IsQA }/>
				Is QA
			</label>
		</fieldset>
		<input type="submit" value="Join Session"/>
	</form>
}

templ SessionRoom(session models.Session, currentUser models.User) {
	@titleSpan(fmt.Sprintf("Session %s - Welcome %s", session.ID, currentUser.Name))
	<div hx-ext="ws" ws-connect={ fmt.Sprintf("/session/%s/user/%s/ws", session.ID, currentUser.ID) }>
		@PokerContent(session, currentUser)
	</div>
}

templ PokerError(message string) {
	<div id="pokerError" class="error">{ message }</div>
}

templ PokerContent(session models.Session, currentUser models.User) {
	<div id="pokerContent">
		@PokerError("")
		<article>
			<header>Cards</header>
			<div class={ templ.KV("grid", len(session.Cards) <= 5) }>
				for _, row := range session.Rows {
					<div>
						if len(session.Rows) > 1 {
							<small style="padding-left: 0.8rem;">{ row }</small>
						}
						<div class={ "poker-grid", templ.KV("poker-grid-border", len(session.Rows) > 1) }>
							for _, card := range session.Cards {
								<div
									class={ "poker-card", templ.KV("selected-card", currentUser.Cards[row] == card) }
									hx-vals={ fmt.Sprintf(`{"card": "%s", "row": "%s", "undoSelection": %t}`, card, row, currentUser.Cards[row] == card) }
									if !session.Showing {
										ws-send
									}
								>{ card }</div>
							}
						</div>
					</div>
				}
			</div>
		</article>
		<article>
			<header>Results</header>
			<div class="grid">
				if results,  ok := session.Calc(); ok || session.Showing {
					if session.Showing {
						<button class="secondary" hx-vals={ `{"resetResults": true}` } ws-send>Reset</button>
						for _, result := range results {
							@cardResults(result)
						}
					} else {
						<button hx-vals={ `{"showResults": true}` } ws-send>Show Results</button>
					}
				} else {
					<div>All participants much choose a card</div>
				}
			</div>
		</article>
		<article>
			<header>Players</header>
			<div class="grid player-row">
				<div>User</div>
				<div>Is QA</div>
				<div>User Type</div>
			</div>
			for _, user := range session.ReadyUsers() {
				<div class={ "grid", "player-row", templ.KV("has-selected-card", user.Ready), templ.KV("not-active", !user.Active) }>
					<div>{ user.Name }</div>
					if user.ID == currentUser.ID {
						<div>
							<input
								type="checkbox"
								role="switch"
								hx-vals={ `{"flipQA": true}` }
								checked?={ currentUser.IsQA }
								ws-send
								if session.Showing {
									disabled
								}
							/>
						</div>
						<div>
							if session.Showing {
								{ string(user.Type) }
							} else {
								<a
									class="secondary"
									data-tooltip="Click to switch type"
									hx-vals={ `{"flipType": true}` }
									ws-send
								>{ string(user.Type) }</a>
							}
						</div>
					} else {
						<div>{ strconv.FormatBool(user.IsQA) }</div>
						<div>{ string(user.Type) }</div>
					}
				</div>
			}
		</article>
	</div>
}

templ cardResults(result models.CalcResults) {
	<div class="results">
		if result.Name != "" {
			<div>~{ result.Name }~</div>
		}
		<hr/>
		<div>Avg: { result.Points() }</div>
		<div>Distribution: { result.Distribution() }</div>
		if qaPoints := result.QAPoints(); qaPoints != "" {
			<hr/>
			<div>QA Avg: { qaPoints }</div>
			<div>QA Distribution: { result.QADistribution() }</div>
		}
	</div>
}
